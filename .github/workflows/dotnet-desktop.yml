name: Nightly Build

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight
  workflow_dispatch: # manual run
  
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          
      - name: Restore .NET MAUI Workloads
        run: |
          dotnet workload install maui-android
          dotnet workload install maui-desktop
          dotnet workload install maui-ios
          dotnet workload install maui-tizen
      
      - name: Restore dependencies
        run: dotnet restore     
      
      - name: Publish
        run: dotnet publish -c Release -f net9.0-windows10.0.26100.0 /p:RuntimeIdentifierOverride=win10-x64 /p:GenerateAppxPackageOnBuild=true      

      - name: Determine Version and Tag
        id: determine-version
        run: |
          [xml]$manifest = Get-Content FileFlux/Platforms/Windows/Package.appmanifest
          $version = $manifest.Package.Identity          
          $date = (Get-Date).ToString("yyyyMMdd")
          $tag = "v$version-$date"
          echo "tag=$tag" >> $GITHUB_ENV
          echo "::set-output name=tag::$tag"
        shell: pwsh
      
      - name: Find Published Artifact
        id: find-artifact
        run: |
          $path = Get-ChildItem -Path FileFlux/bin/Release/* -Recurse -Filter "*.msix" | Select-Object -First 1
          echo "::set-output name=artifact_path::$($path.FullName)"
        shell: pwsh

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine-version.outputs.tag }}
          release_name: Nightly Build ${{ steps.determine-version.outputs.tag }}
          body: "Nightly Build ${{ steps.determine-version.outputs.tag }}"
          draft: false
          prerelease: true

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find-artifact.outputs.artifact_path }}
          asset_name: $(basename ${{ steps.find-artifact.outputs.artifact_path }})
          asset_content_type: application/octet-stream
